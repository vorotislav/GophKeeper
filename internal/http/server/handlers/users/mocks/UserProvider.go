// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	models "GophKeeper/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserProvider is an autogenerated mock type for the UserProvider type
type UserProvider struct {
	mock.Mock
}

type UserProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *UserProvider) EXPECT() *UserProvider_Expecter {
	return &UserProvider_Expecter{mock: &_m.Mock}
}

// UserCreate provides a mock function with given fields: ctx, um
func (_m *UserProvider) UserCreate(ctx context.Context, um models.UserMachine) (models.Session, error) {
	ret := _m.Called(ctx, um)

	var r0 models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserMachine) (models.Session, error)); ok {
		return rf(ctx, um)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserMachine) models.Session); ok {
		r0 = rf(ctx, um)
	} else {
		r0 = ret.Get(0).(models.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserMachine) error); ok {
		r1 = rf(ctx, um)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserProvider_UserCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserCreate'
type UserProvider_UserCreate_Call struct {
	*mock.Call
}

// UserCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - um models.UserMachine
func (_e *UserProvider_Expecter) UserCreate(ctx interface{}, um interface{}) *UserProvider_UserCreate_Call {
	return &UserProvider_UserCreate_Call{Call: _e.mock.On("UserCreate", ctx, um)}
}

func (_c *UserProvider_UserCreate_Call) Run(run func(ctx context.Context, um models.UserMachine)) *UserProvider_UserCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserMachine))
	})
	return _c
}

func (_c *UserProvider_UserCreate_Call) Return(_a0 models.Session, _a1 error) *UserProvider_UserCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserProvider_UserCreate_Call) RunAndReturn(run func(context.Context, models.UserMachine) (models.Session, error)) *UserProvider_UserCreate_Call {
	_c.Call.Return(run)
	return _c
}

// UserLogin provides a mock function with given fields: ctx, um
func (_m *UserProvider) UserLogin(ctx context.Context, um models.UserMachine) (models.Session, error) {
	ret := _m.Called(ctx, um)

	var r0 models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserMachine) (models.Session, error)); ok {
		return rf(ctx, um)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserMachine) models.Session); ok {
		r0 = rf(ctx, um)
	} else {
		r0 = ret.Get(0).(models.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserMachine) error); ok {
		r1 = rf(ctx, um)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserProvider_UserLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserLogin'
type UserProvider_UserLogin_Call struct {
	*mock.Call
}

// UserLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - um models.UserMachine
func (_e *UserProvider_Expecter) UserLogin(ctx interface{}, um interface{}) *UserProvider_UserLogin_Call {
	return &UserProvider_UserLogin_Call{Call: _e.mock.On("UserLogin", ctx, um)}
}

func (_c *UserProvider_UserLogin_Call) Run(run func(ctx context.Context, um models.UserMachine)) *UserProvider_UserLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.UserMachine))
	})
	return _c
}

func (_c *UserProvider_UserLogin_Call) Return(_a0 models.Session, _a1 error) *UserProvider_UserLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserProvider_UserLogin_Call) RunAndReturn(run func(context.Context, models.UserMachine) (models.Session, error)) *UserProvider_UserLogin_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUserProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserProvider creates a new instance of UserProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserProvider(t mockConstructorTestingTNewUserProvider) *UserProvider {
	mock := &UserProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
