// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	models "GophKeeper/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CardProvider is an autogenerated mock type for the CardProvider type
type CardProvider struct {
	mock.Mock
}

type CardProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *CardProvider) EXPECT() *CardProvider_Expecter {
	return &CardProvider_Expecter{mock: &_m.Mock}
}

// CardCreate provides a mock function with given fields: ctx, c
func (_m *CardProvider) CardCreate(ctx context.Context, c models.Card) error {
	ret := _m.Called(ctx, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Card) error); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CardProvider_CardCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CardCreate'
type CardProvider_CardCreate_Call struct {
	*mock.Call
}

// CardCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - c models.Card
func (_e *CardProvider_Expecter) CardCreate(ctx interface{}, c interface{}) *CardProvider_CardCreate_Call {
	return &CardProvider_CardCreate_Call{Call: _e.mock.On("CardCreate", ctx, c)}
}

func (_c *CardProvider_CardCreate_Call) Run(run func(ctx context.Context, c models.Card)) *CardProvider_CardCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Card))
	})
	return _c
}

func (_c *CardProvider_CardCreate_Call) Return(_a0 error) *CardProvider_CardCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CardProvider_CardCreate_Call) RunAndReturn(run func(context.Context, models.Card) error) *CardProvider_CardCreate_Call {
	_c.Call.Return(run)
	return _c
}

// CardDelete provides a mock function with given fields: ctx, id
func (_m *CardProvider) CardDelete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CardProvider_CardDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CardDelete'
type CardProvider_CardDelete_Call struct {
	*mock.Call
}

// CardDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *CardProvider_Expecter) CardDelete(ctx interface{}, id interface{}) *CardProvider_CardDelete_Call {
	return &CardProvider_CardDelete_Call{Call: _e.mock.On("CardDelete", ctx, id)}
}

func (_c *CardProvider_CardDelete_Call) Run(run func(ctx context.Context, id int)) *CardProvider_CardDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *CardProvider_CardDelete_Call) Return(_a0 error) *CardProvider_CardDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CardProvider_CardDelete_Call) RunAndReturn(run func(context.Context, int) error) *CardProvider_CardDelete_Call {
	_c.Call.Return(run)
	return _c
}

// CardUpdate provides a mock function with given fields: ctx, c
func (_m *CardProvider) CardUpdate(ctx context.Context, c models.Card) error {
	ret := _m.Called(ctx, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Card) error); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CardProvider_CardUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CardUpdate'
type CardProvider_CardUpdate_Call struct {
	*mock.Call
}

// CardUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - c models.Card
func (_e *CardProvider_Expecter) CardUpdate(ctx interface{}, c interface{}) *CardProvider_CardUpdate_Call {
	return &CardProvider_CardUpdate_Call{Call: _e.mock.On("CardUpdate", ctx, c)}
}

func (_c *CardProvider_CardUpdate_Call) Run(run func(ctx context.Context, c models.Card)) *CardProvider_CardUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Card))
	})
	return _c
}

func (_c *CardProvider_CardUpdate_Call) Return(_a0 error) *CardProvider_CardUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CardProvider_CardUpdate_Call) RunAndReturn(run func(context.Context, models.Card) error) *CardProvider_CardUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Cards provides a mock function with given fields: ctx
func (_m *CardProvider) Cards(ctx context.Context) ([]models.Card, error) {
	ret := _m.Called(ctx)

	var r0 []models.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Card, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Card); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CardProvider_Cards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cards'
type CardProvider_Cards_Call struct {
	*mock.Call
}

// Cards is a helper method to define mock.On call
//   - ctx context.Context
func (_e *CardProvider_Expecter) Cards(ctx interface{}) *CardProvider_Cards_Call {
	return &CardProvider_Cards_Call{Call: _e.mock.On("Cards", ctx)}
}

func (_c *CardProvider_Cards_Call) Run(run func(ctx context.Context)) *CardProvider_Cards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CardProvider_Cards_Call) Return(_a0 []models.Card, _a1 error) *CardProvider_Cards_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CardProvider_Cards_Call) RunAndReturn(run func(context.Context) ([]models.Card, error)) *CardProvider_Cards_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCardProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewCardProvider creates a new instance of CardProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCardProvider(t mockConstructorTestingTNewCardProvider) *CardProvider {
	mock := &CardProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
