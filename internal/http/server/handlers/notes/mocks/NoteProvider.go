// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	models "GophKeeper/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// NoteProvider is an autogenerated mock type for the NoteProvider type
type NoteProvider struct {
	mock.Mock
}

type NoteProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *NoteProvider) EXPECT() *NoteProvider_Expecter {
	return &NoteProvider_Expecter{mock: &_m.Mock}
}

// NoteCreate provides a mock function with given fields: ctx, n
func (_m *NoteProvider) NoteCreate(ctx context.Context, n models.Note) error {
	ret := _m.Called(ctx, n)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Note) error); ok {
		r0 = rf(ctx, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NoteProvider_NoteCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NoteCreate'
type NoteProvider_NoteCreate_Call struct {
	*mock.Call
}

// NoteCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - n models.Note
func (_e *NoteProvider_Expecter) NoteCreate(ctx interface{}, n interface{}) *NoteProvider_NoteCreate_Call {
	return &NoteProvider_NoteCreate_Call{Call: _e.mock.On("NoteCreate", ctx, n)}
}

func (_c *NoteProvider_NoteCreate_Call) Run(run func(ctx context.Context, n models.Note)) *NoteProvider_NoteCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Note))
	})
	return _c
}

func (_c *NoteProvider_NoteCreate_Call) Return(_a0 error) *NoteProvider_NoteCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NoteProvider_NoteCreate_Call) RunAndReturn(run func(context.Context, models.Note) error) *NoteProvider_NoteCreate_Call {
	_c.Call.Return(run)
	return _c
}

// NoteDelete provides a mock function with given fields: ctx, id
func (_m *NoteProvider) NoteDelete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NoteProvider_NoteDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NoteDelete'
type NoteProvider_NoteDelete_Call struct {
	*mock.Call
}

// NoteDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *NoteProvider_Expecter) NoteDelete(ctx interface{}, id interface{}) *NoteProvider_NoteDelete_Call {
	return &NoteProvider_NoteDelete_Call{Call: _e.mock.On("NoteDelete", ctx, id)}
}

func (_c *NoteProvider_NoteDelete_Call) Run(run func(ctx context.Context, id int)) *NoteProvider_NoteDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *NoteProvider_NoteDelete_Call) Return(_a0 error) *NoteProvider_NoteDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NoteProvider_NoteDelete_Call) RunAndReturn(run func(context.Context, int) error) *NoteProvider_NoteDelete_Call {
	_c.Call.Return(run)
	return _c
}

// NoteUpdate provides a mock function with given fields: ctx, n
func (_m *NoteProvider) NoteUpdate(ctx context.Context, n models.Note) error {
	ret := _m.Called(ctx, n)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Note) error); ok {
		r0 = rf(ctx, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NoteProvider_NoteUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NoteUpdate'
type NoteProvider_NoteUpdate_Call struct {
	*mock.Call
}

// NoteUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - n models.Note
func (_e *NoteProvider_Expecter) NoteUpdate(ctx interface{}, n interface{}) *NoteProvider_NoteUpdate_Call {
	return &NoteProvider_NoteUpdate_Call{Call: _e.mock.On("NoteUpdate", ctx, n)}
}

func (_c *NoteProvider_NoteUpdate_Call) Run(run func(ctx context.Context, n models.Note)) *NoteProvider_NoteUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Note))
	})
	return _c
}

func (_c *NoteProvider_NoteUpdate_Call) Return(_a0 error) *NoteProvider_NoteUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NoteProvider_NoteUpdate_Call) RunAndReturn(run func(context.Context, models.Note) error) *NoteProvider_NoteUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Notes provides a mock function with given fields: ctx
func (_m *NoteProvider) Notes(ctx context.Context) ([]models.Note, error) {
	ret := _m.Called(ctx)

	var r0 []models.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Note, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Note); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteProvider_Notes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notes'
type NoteProvider_Notes_Call struct {
	*mock.Call
}

// Notes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *NoteProvider_Expecter) Notes(ctx interface{}) *NoteProvider_Notes_Call {
	return &NoteProvider_Notes_Call{Call: _e.mock.On("Notes", ctx)}
}

func (_c *NoteProvider_Notes_Call) Run(run func(ctx context.Context)) *NoteProvider_Notes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *NoteProvider_Notes_Call) Return(_a0 []models.Note, _a1 error) *NoteProvider_Notes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteProvider_Notes_Call) RunAndReturn(run func(context.Context) ([]models.Note, error)) *NoteProvider_Notes_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewNoteProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewNoteProvider creates a new instance of NoteProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNoteProvider(t mockConstructorTestingTNewNoteProvider) *NoteProvider {
	mock := &NoteProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
