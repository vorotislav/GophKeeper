// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "GophKeeper/internal/models"
)

// MediaProvider is an autogenerated mock type for the MediaProvider type
type MediaProvider struct {
	mock.Mock
}

type MediaProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MediaProvider) EXPECT() *MediaProvider_Expecter {
	return &MediaProvider_Expecter{mock: &_m.Mock}
}

// MediaCreate provides a mock function with given fields: ctx, m
func (_m *MediaProvider) MediaCreate(ctx context.Context, m models.Media) error {
	ret := _m.Called(ctx, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Media) error); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MediaProvider_MediaCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MediaCreate'
type MediaProvider_MediaCreate_Call struct {
	*mock.Call
}

// MediaCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - m models.Media
func (_e *MediaProvider_Expecter) MediaCreate(ctx interface{}, m interface{}) *MediaProvider_MediaCreate_Call {
	return &MediaProvider_MediaCreate_Call{Call: _e.mock.On("MediaCreate", ctx, m)}
}

func (_c *MediaProvider_MediaCreate_Call) Run(run func(ctx context.Context, m models.Media)) *MediaProvider_MediaCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Media))
	})
	return _c
}

func (_c *MediaProvider_MediaCreate_Call) Return(_a0 error) *MediaProvider_MediaCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MediaProvider_MediaCreate_Call) RunAndReturn(run func(context.Context, models.Media) error) *MediaProvider_MediaCreate_Call {
	_c.Call.Return(run)
	return _c
}

// MediaDelete provides a mock function with given fields: ctx, id
func (_m *MediaProvider) MediaDelete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MediaProvider_MediaDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MediaDelete'
type MediaProvider_MediaDelete_Call struct {
	*mock.Call
}

// MediaDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MediaProvider_Expecter) MediaDelete(ctx interface{}, id interface{}) *MediaProvider_MediaDelete_Call {
	return &MediaProvider_MediaDelete_Call{Call: _e.mock.On("MediaDelete", ctx, id)}
}

func (_c *MediaProvider_MediaDelete_Call) Run(run func(ctx context.Context, id int)) *MediaProvider_MediaDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MediaProvider_MediaDelete_Call) Return(_a0 error) *MediaProvider_MediaDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MediaProvider_MediaDelete_Call) RunAndReturn(run func(context.Context, int) error) *MediaProvider_MediaDelete_Call {
	_c.Call.Return(run)
	return _c
}

// MediaUpdate provides a mock function with given fields: ctx, m
func (_m *MediaProvider) MediaUpdate(ctx context.Context, m models.Media) error {
	ret := _m.Called(ctx, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Media) error); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MediaProvider_MediaUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MediaUpdate'
type MediaProvider_MediaUpdate_Call struct {
	*mock.Call
}

// MediaUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - m models.Media
func (_e *MediaProvider_Expecter) MediaUpdate(ctx interface{}, m interface{}) *MediaProvider_MediaUpdate_Call {
	return &MediaProvider_MediaUpdate_Call{Call: _e.mock.On("MediaUpdate", ctx, m)}
}

func (_c *MediaProvider_MediaUpdate_Call) Run(run func(ctx context.Context, m models.Media)) *MediaProvider_MediaUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Media))
	})
	return _c
}

func (_c *MediaProvider_MediaUpdate_Call) Return(_a0 error) *MediaProvider_MediaUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MediaProvider_MediaUpdate_Call) RunAndReturn(run func(context.Context, models.Media) error) *MediaProvider_MediaUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Medias provides a mock function with given fields: ctx
func (_m *MediaProvider) Medias(ctx context.Context) ([]models.Media, error) {
	ret := _m.Called(ctx)

	var r0 []models.Media
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Media, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Media); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Media)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MediaProvider_Medias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Medias'
type MediaProvider_Medias_Call struct {
	*mock.Call
}

// Medias is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MediaProvider_Expecter) Medias(ctx interface{}) *MediaProvider_Medias_Call {
	return &MediaProvider_Medias_Call{Call: _e.mock.On("Medias", ctx)}
}

func (_c *MediaProvider_Medias_Call) Run(run func(ctx context.Context)) *MediaProvider_Medias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MediaProvider_Medias_Call) Return(_a0 []models.Media, _a1 error) *MediaProvider_Medias_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MediaProvider_Medias_Call) RunAndReturn(run func(context.Context) ([]models.Media, error)) *MediaProvider_Medias_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMediaProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewMediaProvider creates a new instance of MediaProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMediaProvider(t mockConstructorTestingTNewMediaProvider) *MediaProvider {
	mock := &MediaProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
