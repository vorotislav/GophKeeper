// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	models "GophKeeper/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// PasswordProvider is an autogenerated mock type for the PasswordProvider type
type PasswordProvider struct {
	mock.Mock
}

type PasswordProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *PasswordProvider) EXPECT() *PasswordProvider_Expecter {
	return &PasswordProvider_Expecter{mock: &_m.Mock}
}

// PasswordCreate provides a mock function with given fields: ctx, p
func (_m *PasswordProvider) PasswordCreate(ctx context.Context, p models.Password) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Password) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PasswordProvider_PasswordCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PasswordCreate'
type PasswordProvider_PasswordCreate_Call struct {
	*mock.Call
}

// PasswordCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - p models.Password
func (_e *PasswordProvider_Expecter) PasswordCreate(ctx interface{}, p interface{}) *PasswordProvider_PasswordCreate_Call {
	return &PasswordProvider_PasswordCreate_Call{Call: _e.mock.On("PasswordCreate", ctx, p)}
}

func (_c *PasswordProvider_PasswordCreate_Call) Run(run func(ctx context.Context, p models.Password)) *PasswordProvider_PasswordCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Password))
	})
	return _c
}

func (_c *PasswordProvider_PasswordCreate_Call) Return(_a0 error) *PasswordProvider_PasswordCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PasswordProvider_PasswordCreate_Call) RunAndReturn(run func(context.Context, models.Password) error) *PasswordProvider_PasswordCreate_Call {
	_c.Call.Return(run)
	return _c
}

// PasswordDelete provides a mock function with given fields: ctx, id
func (_m *PasswordProvider) PasswordDelete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PasswordProvider_PasswordDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PasswordDelete'
type PasswordProvider_PasswordDelete_Call struct {
	*mock.Call
}

// PasswordDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *PasswordProvider_Expecter) PasswordDelete(ctx interface{}, id interface{}) *PasswordProvider_PasswordDelete_Call {
	return &PasswordProvider_PasswordDelete_Call{Call: _e.mock.On("PasswordDelete", ctx, id)}
}

func (_c *PasswordProvider_PasswordDelete_Call) Run(run func(ctx context.Context, id int)) *PasswordProvider_PasswordDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *PasswordProvider_PasswordDelete_Call) Return(_a0 error) *PasswordProvider_PasswordDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PasswordProvider_PasswordDelete_Call) RunAndReturn(run func(context.Context, int) error) *PasswordProvider_PasswordDelete_Call {
	_c.Call.Return(run)
	return _c
}

// PasswordUpdate provides a mock function with given fields: ctx, p
func (_m *PasswordProvider) PasswordUpdate(ctx context.Context, p models.Password) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Password) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PasswordProvider_PasswordUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PasswordUpdate'
type PasswordProvider_PasswordUpdate_Call struct {
	*mock.Call
}

// PasswordUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - p models.Password
func (_e *PasswordProvider_Expecter) PasswordUpdate(ctx interface{}, p interface{}) *PasswordProvider_PasswordUpdate_Call {
	return &PasswordProvider_PasswordUpdate_Call{Call: _e.mock.On("PasswordUpdate", ctx, p)}
}

func (_c *PasswordProvider_PasswordUpdate_Call) Run(run func(ctx context.Context, p models.Password)) *PasswordProvider_PasswordUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Password))
	})
	return _c
}

func (_c *PasswordProvider_PasswordUpdate_Call) Return(_a0 error) *PasswordProvider_PasswordUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PasswordProvider_PasswordUpdate_Call) RunAndReturn(run func(context.Context, models.Password) error) *PasswordProvider_PasswordUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Passwords provides a mock function with given fields: ctx
func (_m *PasswordProvider) Passwords(ctx context.Context) ([]models.Password, error) {
	ret := _m.Called(ctx)

	var r0 []models.Password
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Password, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Password); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Password)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordProvider_Passwords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Passwords'
type PasswordProvider_Passwords_Call struct {
	*mock.Call
}

// Passwords is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PasswordProvider_Expecter) Passwords(ctx interface{}) *PasswordProvider_Passwords_Call {
	return &PasswordProvider_Passwords_Call{Call: _e.mock.On("Passwords", ctx)}
}

func (_c *PasswordProvider_Passwords_Call) Run(run func(ctx context.Context)) *PasswordProvider_Passwords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PasswordProvider_Passwords_Call) Return(_a0 []models.Password, _a1 error) *PasswordProvider_Passwords_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordProvider_Passwords_Call) RunAndReturn(run func(context.Context) ([]models.Password, error)) *PasswordProvider_Passwords_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewPasswordProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewPasswordProvider creates a new instance of PasswordProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPasswordProvider(t mockConstructorTestingTNewPasswordProvider) *PasswordProvider {
	mock := &PasswordProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
