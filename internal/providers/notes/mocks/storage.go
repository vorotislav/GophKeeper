// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	models "GophKeeper/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// NoteCreate provides a mock function with given fields: ctx, n, userID
func (_m *Storage) NoteCreate(ctx context.Context, n models.Note, userID int) error {
	ret := _m.Called(ctx, n, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Note, int) error); ok {
		r0 = rf(ctx, n, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_NoteCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NoteCreate'
type Storage_NoteCreate_Call struct {
	*mock.Call
}

// NoteCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - n models.Note
//   - userID int
func (_e *Storage_Expecter) NoteCreate(ctx interface{}, n interface{}, userID interface{}) *Storage_NoteCreate_Call {
	return &Storage_NoteCreate_Call{Call: _e.mock.On("NoteCreate", ctx, n, userID)}
}

func (_c *Storage_NoteCreate_Call) Run(run func(ctx context.Context, n models.Note, userID int)) *Storage_NoteCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Note), args[2].(int))
	})
	return _c
}

func (_c *Storage_NoteCreate_Call) Return(_a0 error) *Storage_NoteCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_NoteCreate_Call) RunAndReturn(run func(context.Context, models.Note, int) error) *Storage_NoteCreate_Call {
	_c.Call.Return(run)
	return _c
}

// NoteDelete provides a mock function with given fields: ctx, id, userID
func (_m *Storage) NoteDelete(ctx context.Context, id int, userID int) error {
	ret := _m.Called(ctx, id, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_NoteDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NoteDelete'
type Storage_NoteDelete_Call struct {
	*mock.Call
}

// NoteDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - userID int
func (_e *Storage_Expecter) NoteDelete(ctx interface{}, id interface{}, userID interface{}) *Storage_NoteDelete_Call {
	return &Storage_NoteDelete_Call{Call: _e.mock.On("NoteDelete", ctx, id, userID)}
}

func (_c *Storage_NoteDelete_Call) Run(run func(ctx context.Context, id int, userID int)) *Storage_NoteDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *Storage_NoteDelete_Call) Return(_a0 error) *Storage_NoteDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_NoteDelete_Call) RunAndReturn(run func(context.Context, int, int) error) *Storage_NoteDelete_Call {
	_c.Call.Return(run)
	return _c
}

// NoteUpdate provides a mock function with given fields: ctx, n, userID
func (_m *Storage) NoteUpdate(ctx context.Context, n models.Note, userID int) error {
	ret := _m.Called(ctx, n, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Note, int) error); ok {
		r0 = rf(ctx, n, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_NoteUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NoteUpdate'
type Storage_NoteUpdate_Call struct {
	*mock.Call
}

// NoteUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - n models.Note
//   - userID int
func (_e *Storage_Expecter) NoteUpdate(ctx interface{}, n interface{}, userID interface{}) *Storage_NoteUpdate_Call {
	return &Storage_NoteUpdate_Call{Call: _e.mock.On("NoteUpdate", ctx, n, userID)}
}

func (_c *Storage_NoteUpdate_Call) Run(run func(ctx context.Context, n models.Note, userID int)) *Storage_NoteUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Note), args[2].(int))
	})
	return _c
}

func (_c *Storage_NoteUpdate_Call) Return(_a0 error) *Storage_NoteUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_NoteUpdate_Call) RunAndReturn(run func(context.Context, models.Note, int) error) *Storage_NoteUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Notes provides a mock function with given fields: ctx, userID
func (_m *Storage) Notes(ctx context.Context, userID int) ([]models.Note, error) {
	ret := _m.Called(ctx, userID)

	var r0 []models.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]models.Note, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.Note); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_Notes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notes'
type Storage_Notes_Call struct {
	*mock.Call
}

// Notes is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *Storage_Expecter) Notes(ctx interface{}, userID interface{}) *Storage_Notes_Call {
	return &Storage_Notes_Call{Call: _e.mock.On("Notes", ctx, userID)}
}

func (_c *Storage_Notes_Call) Run(run func(ctx context.Context, userID int)) *Storage_Notes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Storage_Notes_Call) Return(_a0 []models.Note, _a1 error) *Storage_Notes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_Notes_Call) RunAndReturn(run func(context.Context, int) ([]models.Note, error)) *Storage_Notes_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
