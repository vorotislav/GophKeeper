// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	models "GophKeeper/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// CheckSessionFromClient provides a mock function with given fields: ctx, ipAddress
func (_m *Storage) CheckSessionFromClient(ctx context.Context, ipAddress string) ([]int64, error) {
	ret := _m.Called(ctx, ipAddress)

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]int64, error)); ok {
		return rf(ctx, ipAddress)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []int64); ok {
		r0 = rf(ctx, ipAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ipAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_CheckSessionFromClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckSessionFromClient'
type Storage_CheckSessionFromClient_Call struct {
	*mock.Call
}

// CheckSessionFromClient is a helper method to define mock.On call
//   - ctx context.Context
//   - ipAddress string
func (_e *Storage_Expecter) CheckSessionFromClient(ctx interface{}, ipAddress interface{}) *Storage_CheckSessionFromClient_Call {
	return &Storage_CheckSessionFromClient_Call{Call: _e.mock.On("CheckSessionFromClient", ctx, ipAddress)}
}

func (_c *Storage_CheckSessionFromClient_Call) Run(run func(ctx context.Context, ipAddress string)) *Storage_CheckSessionFromClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Storage_CheckSessionFromClient_Call) Return(_a0 []int64, _a1 error) *Storage_CheckSessionFromClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_CheckSessionFromClient_Call) RunAndReturn(run func(context.Context, string) ([]int64, error)) *Storage_CheckSessionFromClient_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveSession provides a mock function with given fields: ctx, id
func (_m *Storage) RemoveSession(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_RemoveSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveSession'
type Storage_RemoveSession_Call struct {
	*mock.Call
}

// RemoveSession is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Storage_Expecter) RemoveSession(ctx interface{}, id interface{}) *Storage_RemoveSession_Call {
	return &Storage_RemoveSession_Call{Call: _e.mock.On("RemoveSession", ctx, id)}
}

func (_c *Storage_RemoveSession_Call) Run(run func(ctx context.Context, id int64)) *Storage_RemoveSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Storage_RemoveSession_Call) Return(_a0 error) *Storage_RemoveSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_RemoveSession_Call) RunAndReturn(run func(context.Context, int64) error) *Storage_RemoveSession_Call {
	_c.Call.Return(run)
	return _c
}

// SessionCreate provides a mock function with given fields: ctx, session
func (_m *Storage) SessionCreate(ctx context.Context, session models.Session) (models.Session, error) {
	ret := _m.Called(ctx, session)

	var r0 models.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Session) (models.Session, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Session) models.Session); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Get(0).(models.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Session) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_SessionCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SessionCreate'
type Storage_SessionCreate_Call struct {
	*mock.Call
}

// SessionCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - session models.Session
func (_e *Storage_Expecter) SessionCreate(ctx interface{}, session interface{}) *Storage_SessionCreate_Call {
	return &Storage_SessionCreate_Call{Call: _e.mock.On("SessionCreate", ctx, session)}
}

func (_c *Storage_SessionCreate_Call) Run(run func(ctx context.Context, session models.Session)) *Storage_SessionCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Session))
	})
	return _c
}

func (_c *Storage_SessionCreate_Call) Return(_a0 models.Session, _a1 error) *Storage_SessionCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_SessionCreate_Call) RunAndReturn(run func(context.Context, models.Session) (models.Session, error)) *Storage_SessionCreate_Call {
	_c.Call.Return(run)
	return _c
}

// UserCreate provides a mock function with given fields: ctx, user
func (_m *Storage) UserCreate(ctx context.Context, user models.User) (models.User, error) {
	ret := _m.Called(ctx, user)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (models.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) models.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_UserCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserCreate'
type Storage_UserCreate_Call struct {
	*mock.Call
}

// UserCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - user models.User
func (_e *Storage_Expecter) UserCreate(ctx interface{}, user interface{}) *Storage_UserCreate_Call {
	return &Storage_UserCreate_Call{Call: _e.mock.On("UserCreate", ctx, user)}
}

func (_c *Storage_UserCreate_Call) Run(run func(ctx context.Context, user models.User)) *Storage_UserCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *Storage_UserCreate_Call) Return(_a0 models.User, _a1 error) *Storage_UserCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_UserCreate_Call) RunAndReturn(run func(context.Context, models.User) (models.User, error)) *Storage_UserCreate_Call {
	_c.Call.Return(run)
	return _c
}

// UserLogin provides a mock function with given fields: ctx, user
func (_m *Storage) UserLogin(ctx context.Context, user models.User) (models.User, error) {
	ret := _m.Called(ctx, user)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (models.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) models.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_UserLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserLogin'
type Storage_UserLogin_Call struct {
	*mock.Call
}

// UserLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - user models.User
func (_e *Storage_Expecter) UserLogin(ctx interface{}, user interface{}) *Storage_UserLogin_Call {
	return &Storage_UserLogin_Call{Call: _e.mock.On("UserLogin", ctx, user)}
}

func (_c *Storage_UserLogin_Call) Run(run func(ctx context.Context, user models.User)) *Storage_UserLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *Storage_UserLogin_Call) Return(_a0 models.User, _a1 error) *Storage_UserLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_UserLogin_Call) RunAndReturn(run func(context.Context, models.User) (models.User, error)) *Storage_UserLogin_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
