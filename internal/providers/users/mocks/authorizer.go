// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	token "GophKeeper/internal/token"
)

// Authorizer is an autogenerated mock type for the authorizer type
type Authorizer struct {
	mock.Mock
}

type Authorizer_Expecter struct {
	mock *mock.Mock
}

func (_m *Authorizer) EXPECT() *Authorizer_Expecter {
	return &Authorizer_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with given fields: payload
func (_m *Authorizer) GenerateToken(payload token.Payload) (string, error) {
	ret := _m.Called(payload)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(token.Payload) (string, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(token.Payload) string); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(token.Payload) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Authorizer_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type Authorizer_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - payload token.Payload
func (_e *Authorizer_Expecter) GenerateToken(payload interface{}) *Authorizer_GenerateToken_Call {
	return &Authorizer_GenerateToken_Call{Call: _e.mock.On("GenerateToken", payload)}
}

func (_c *Authorizer_GenerateToken_Call) Run(run func(payload token.Payload)) *Authorizer_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(token.Payload))
	})
	return _c
}

func (_c *Authorizer_GenerateToken_Call) Return(_a0 string, _a1 error) *Authorizer_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Authorizer_GenerateToken_Call) RunAndReturn(run func(token.Payload) (string, error)) *Authorizer_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefreshTokenDurationLifetime provides a mock function with given fields:
func (_m *Authorizer) GetRefreshTokenDurationLifetime() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Authorizer_GetRefreshTokenDurationLifetime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefreshTokenDurationLifetime'
type Authorizer_GetRefreshTokenDurationLifetime_Call struct {
	*mock.Call
}

// GetRefreshTokenDurationLifetime is a helper method to define mock.On call
func (_e *Authorizer_Expecter) GetRefreshTokenDurationLifetime() *Authorizer_GetRefreshTokenDurationLifetime_Call {
	return &Authorizer_GetRefreshTokenDurationLifetime_Call{Call: _e.mock.On("GetRefreshTokenDurationLifetime")}
}

func (_c *Authorizer_GetRefreshTokenDurationLifetime_Call) Run(run func()) *Authorizer_GetRefreshTokenDurationLifetime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Authorizer_GetRefreshTokenDurationLifetime_Call) Return(_a0 time.Duration) *Authorizer_GetRefreshTokenDurationLifetime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Authorizer_GetRefreshTokenDurationLifetime_Call) RunAndReturn(run func() time.Duration) *Authorizer_GetRefreshTokenDurationLifetime_Call {
	_c.Call.Return(run)
	return _c
}

// ParseToken provides a mock function with given fields: _a0
func (_m *Authorizer) ParseToken(_a0 string) (token.Payload, error) {
	ret := _m.Called(_a0)

	var r0 token.Payload
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (token.Payload, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) token.Payload); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(token.Payload)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Authorizer_ParseToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseToken'
type Authorizer_ParseToken_Call struct {
	*mock.Call
}

// ParseToken is a helper method to define mock.On call
//   - _a0 string
func (_e *Authorizer_Expecter) ParseToken(_a0 interface{}) *Authorizer_ParseToken_Call {
	return &Authorizer_ParseToken_Call{Call: _e.mock.On("ParseToken", _a0)}
}

func (_c *Authorizer_ParseToken_Call) Run(run func(_a0 string)) *Authorizer_ParseToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Authorizer_ParseToken_Call) Return(_a0 token.Payload, _a1 error) *Authorizer_ParseToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Authorizer_ParseToken_Call) RunAndReturn(run func(string) (token.Payload, error)) *Authorizer_ParseToken_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAuthorizer interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthorizer creates a new instance of Authorizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthorizer(t mockConstructorTestingTNewAuthorizer) *Authorizer {
	mock := &Authorizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
